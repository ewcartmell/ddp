ggplot(na.omit(noo), aes(x = cumsum, nps)) +
geom_bar(aes(fill = max), position = 'dodge', stat='identity')
library(ggplot2)
ggplot(na.omit(noo), aes(x = cumsum, nps)) +
geom_bar(aes(fill = max), position = 'dodge', stat='identity')
noo
ggplot(na.omit(noo), aes(x = cumsum, nps)) +
geom_line(aes(fill = max), position = 'dodge', stat='identity')
library(readr)
library(reshape2)
client <- read.csv('documents/reports/nps/unhide.csv')
nps <- read.csv('documents/reports/nps/unhide.csv')
client <- Score
client <- nps$Score
client <- as.data.frame(client)
client$time <- nps$Response.Timestamp
client$time <- as.Date(client$time, "%m/%d/%y")
View(client)
client$name <- nps$client_name
client$segment <- nps$client_segment
client <- arrange(client, name, time)
library(dplyr)
client <- arrange(client, name, time)
client$one <- 1
client <- group_by(client, name, time) %>% mutate("cumsum" = cumsum(one))
client <- group_by(client, name) %>% mutate("cumsum" = cumsum(one))
source('~/Documents/Reports/NPS/nps_score.R')
######################
## RANDOM ############
######################
mydata2[["sign"]] = ifelse(mydata2[["value"]] >= 0, "positive", "negative")
ggplot(tab, aes(Category, NPS)) + geom_bar(aes(x = reorder(Category, -NPS),
client <- group_by(client, name) %>% mutate("cumsum" = cumsum(one)) %>% summarize("nps" = nps_score(Score))
client <- group_by(client, cumsum) %>% summarize("nps" = nps_score(Score))
client <- group_by(client, cumsum) %>% summarize("nps" = nps_score(client))
client <- na.omit(client)
names(client)[1] <- "nps"
client <- group_by(client, name) %>% mutate("cumsum" = cumsum(one))
client <- group_by(client, cumsum) %>% summarize("totnps" = nps_score(nps))
nps <- read.csv('documents/reports/nps/unhide.csv')
client <- nps$Score
client <- as.data.frame(client)
client$time <- nps$Response.Timestamp
client$time <- as.Date(client$time, "%m/%d/%y")
View(client)
client$name <- nps$client_name
client$segment <- nps$client_segment
client <- arrange(client, name, time)
client$one <- 1
client <- group_by(client, name) %>% mutate("cumsum" = cumsum(one))
client <- na.omit(client)
names(client)[1] <- "nps"
client <- na.omit(client)
client <- group_by(client, cumsum) %>% mutate("totnps" = nps_score(nps))
client <- group_by(client, name) %>% mutate("totnps" = max(cumsum))
client <- group_by(client, name) %>% mutate("totnps" = max(cumsum))
group_by(client, name) %>% mutate("totnps" = max(cumsum))
group_by(client, name) %>% mutate("max" = max(cumsum))
totnps
client <- group_by(client, cumsum) %>% mutate("totnps" = nps_score(nps))
client <- group_by(client, name) %>% mutate("max" = max(cumsum))
cut(c(0,1,2,15)), client$max)
cut(client$max, c(0,1,2,15)) )
cut(client$max, c(0,1,2,15) )
cut(client$max, c(0,1,2,15), labels = c("One", "Two", "Three"))
client$group <- cut(client$max, c(0,1,2,15), labels = c("One", "Two", "Three"))
client$group <- cut(client$max, c(0,1,2,15), labels = c("One", "Two", "Three+"))
client <- group_by(client, cumsum) %>% mutate("nthTot" = sum(!is.na(cumsum)))
client <- group_by(client, cumsum, max) %>% mutate("nthTotNarrow" = sum(!is.na(cumsum)))
graph <- group_by(client, cumsum, category, max, obs) %>% summarize("nps_score" = nps_score(nps))
graph <- group_by(client, cumsum, group, max, obs) %>% summarize("nps_score" = nps_score(nps))
graph <- group_by(client, cumsum, group, max, nthTot) %>% summarize("nps_score" = nps_score(nps))
View(graph)
graph2 <- group_by(client, cumsum, group, nthTot) %>% summarize("nps_score" = nps_score(nps))
View(graph2)
graph2 <- group_by(client, cumsum, group) %>% summarize("nps_score" = nps_score(nps))
graph2 <- group_by(client, cumsum, group) %>% summarize("nps_score" = nps_score(nps))
graph2 <- group_by(client, cumsum) %>% summarize("nps_score" = nps_score(nps))
graph2 <- group_by(client, cumsum, group) %>% summarize("nps_score" = nps_score(nps))
ggplot(client, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity')
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity')
graph2 <- group_by(client, cumsum, group) %>% summarize("nps_score" = nps_score(nps), "obs" = sum(nthTot))
graph2 <- group_by(client, cumsum, group) %>% summarize("nps_score" = nps_score(nps), "obs" = sum(!is.na(cumsum)))
graph <- group_by(client, cumsum, group, max, nthTot) %>% summarize("nps_score" = nps_score(nps),
"obs" = sum(!is.na(cumsum)))
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = max)), position = 'dodge', stat = 'identity')
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = max), position = 'dodge', stat = 'identity')
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity')
graph$max <- as.factor(graph$max)
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity')
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = max), position = 'dodge', stat = 'identity')
graph$ratio <- graph$obs/476
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = max, width = ratio), position = 'dodge', stat = 'identity')
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_point(aes(fill = max, size = ratio), position = 'dodge', stat = 'identity')
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_point(aes(color = max, size = ratio), position = 'dodge', stat = 'identity')
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_point(aes(color = max, size = ratio), position = 'dodge', stat = 'identity') + geom_line(aes(color = max))
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = max, width = ratio), position = 'dodge', stat = 'identity')
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = max), position = 'dodge', stat = 'identity')
graph2 <- group_by(client, cumsum, group) %>% summarize("nps_score" = nps_score(nps), "obs" = sum(!is.na(cumsum)))
graph2 <- group_by(client, cumsum, group) %>% summarize("nps_score" = nps_score(nps), "obs" = sum(!is.na(cumsum)))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity')
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = max), position = 'dodge', stat = 'identity')
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity')
ggplot(graph, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = max), position = 'dodge', stat = 'identity')
group_by(client, group) %>% summarize(sum(!is.na(group)))
144+76+52+28+
20
group_by(client, group, name) %>% summarize(sum(!is.na(group)))
new <- group_by(client, group, name) %>% summarize(sum(!is.na(group)))
group_by(new, group) %>% summarize(sum(!is.na(group)))
476+145+144
group_by(client, name) %>% summarize(sum(!is.na(name)))
newnew <- group_by(client, name) %>% summarize(sum(!is.na(name)))
nrow(newnew)
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group, width=obs), position = 'dodge', stat='identity')
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group, width=obs), position = 'dodge', stat='identity')
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity')
client <- group_by(client, cumsum) %>% mutate("nthTot" = sum(!is.na(cumsum)))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = cumsum, y = nps_score, label = round(nps_score, 0)))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = cumsum, y = nps_score, label = round(obs, 0)))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.75,1,1.25,1.9,2.1,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0)))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0)))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0), color = "black"))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0), color = "green"))
client <- group_by(client, name) %>% mutate("max" = max(cumsum))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0), colour = "green"))
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0)), color = "green")
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0)), color = "blue")
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0), color = "jeff"), color = "blue")
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0), color = "jeff"), color = "blue") + xlab("nth response")
ggplot(graph2, aes(x = cumsum, y = nps_score)) + geom_bar(aes(fill = group), position = 'dodge', stat='identity') +
geom_label(aes(x = c(0.66,1,1.33,1.8,2.2,3,4,5,6,7,8,9,10,11,12), y = nps_score, label = round(obs, 0), color = group), color = "blue") + xlab("nth response")
koon <- filter(augnps, squad == "Koon & Neugold")
koon <- filter(nps, squad == "Koon & Neugold")
View(nps)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(ggplot2)
library(rpart)
library(randomForest)
library(corrplot)
library(readr)
train = read_csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
test = read_csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
View(train)
train = train[,colSums(is.na(train)) == 0]
test = test[,colSums(is.na(test)) == 0]
View(trian)
View(train)
inTrain <- createDataPartition(train$classe, p=0.70, list=F)
trainData <- train[inTrain, ]
testData <- train[-inTrain, ]
fit = train(classe ~ ., data = trainData, method = 'rpart')
print(fit, digits = 4)
predict_fit = predict(fit, testData)
confusionMatrix(testData$classe, predict_fit)
fit_rf = train(classe ~ ., data = trainData, method = 'rf', ntree = 30)
summary(fit_rf)
predict_fit_rf = predict(fit_rf, testData)
confusionMatrix(testData$classe, predict_fit_rf)
head(predict_fit_rf)
tail(predict_fit_rf)
predict_test = predict(fit_rf, test)
predict_test
other = read_csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
View(other)
20*150
ncol(test)
ncol(train)
colnames(train[,colSums(is.na(train)) == 0])
names = colnames(train[,colSums(is.na(train)) == 0])
test = test[,names]
names[-"classe"]
length(names)
test = test[,names[1:56]]
predict_test = predict(fit_rf, test)
predict_test
train = read_csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
test = read_csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
train = train[,colSums(is.na(train)) == 0]
names = colnames(train[,colSums(is.na(train)) == 0])
test = test[,names[1:56]]
train = train[,-c(1:7)]
test = train[,-c(1:7)]
ncol(train)
ncol(test)
train = read_csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
test = read_csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
ncol(train)
ncol(test)
train = train[,colSums(is.na(train)) == 0]
ncol(train)
names = colnames(train[,colSums(is.na(train)) == 0])
length(names)
View(train)
test = test[,names[1:56]]
View(test)
ncol(test)
train = train[,-c(1:7)]
test = test[,-c(1:7)]
inTrain <- createDataPartition(train$classe, p=0.70, list=F)
trainData <- train[inTrain, ]
testData <- train[-inTrain, ]
fit_rf = train(classe ~ ., data = trainData, method = 'rf', ntree = 30)
predict_fit_rf = predict(fit_rf, testData)
confusionMatrix(testData$classe, predict_fit_rf)
predict_test = predict(fit_rf, test)
predict_test
View(testData)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
fit_rf = train(y ~ ., data = vowel.train, method = 'rf')
library(caret)
fit_rf = train(y ~ ., data = vowel.train, method = 'rf')
fit_gbm = train(y ~ ., data = vowel.train, method = 'gbm')
fit_gbm = train(y ~ ., data = vowel.train, method = 'gbm')
summary(fit_gbm)
summary(fit_rf)
test_rf = predict(fit_rf, test)
test_rf = predict(fit_rf, vowel.test)
test_gmb = predict(fit_gbm, vowel.test)
confusionMatrix(test_gbm, vowel.test$y)
confusionMatrix(test_rf, vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar('My First Gadget')
)
server <- function(input, output, session) {
observeEvent(input$done, {
stopApp()
})
}
}
myFirstGadget()
myFirstGadget()
pickTrees = function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
pickTrees = function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
}
pickTrees()
pickTrees = function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
}
pickTrees()
library(plotly)
data("mtcars")
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
p
View(mtcars)
?mtcars
db <- src_sqlite("movies.db")
library(RSQLite)
library(dbplyr)
install.packages('RSQLite')
install.packages('dbplyr')
library(RSQLite)
library(dbplyr)
db <- src_sqlite("movies.db")
library(ggvis)
install.packages('ggvis')
library(dplyr)
db <- src_sqlite("movies.db")
air = data(airmiles)
View(air)
data("airmiles")
airmiles
View(airmiles)
?data
data("attitude")
data(attitude)
attitude
View(mtcars)
library(shiny)
runApp('Desktop/R/Shiny/mtcars')
View(faithful)
runApp('Desktop/R/Shiny/mtcars')
seq(min(x), max(x), length.out = input$bins + 1)
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
?sliderInput
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
x    <- mtcars[, 'hp']
y    <- mtcars[, 'mpg']
minhp <- input$hp[1]
maxhp <- input$hp[2]
x    <- x[x > minhp & x < maxhp]
y    <- y[1:length(x)]
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
ggvis(x, y) %>%
layer_points(size := 50, size.hover := 200,
fillOpacity := 0.2, fillOpacity.hover := 0.5)
length(x)
length(y)
library(ggvis)
ggvis(x, y) %>%
layer_points(size := 50, size.hover := 200,
fillOpacity := 0.2, fillOpacity.hover := 0.5)
ggvis(~x, ~y) %>%
layer_points(size := 50, size.hover := 200,
fillOpacity := 0.2, fillOpacity.hover := 0.5)
ggvis(~x, ~y)
ggvis(mtcars, ~mpg, ~wt)
runApp('Desktop/R/Shiny/mtcars')
ggvis(mtcars, ~mpg, ~hp) %>%
layer_points(size := 50, size.hover := 200,
fillOpacity := 0.2, fillOpacity.hover := 0.5)
minhp = 5
maxhp = 160
m <- mtcars %>%
filter(
##Reviews >= reviews,
##Oscars >= oscars,
hp >= minhp,
hp <= maxhp
##BoxOffice >= minboxoffice,
##BoxOffice <= maxboxoffice
)
View(m)
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
?layer_points
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='nedcartmell',
token='069925D4479DCA5CAC3D94D7677CA703',
secret='<SECRET>')
rsconnect::setAccountInfo(name='nedcartmell',
token='069925D4479DCA5CAC3D94D7677CA703',
secret='YRlR5VdeHcwv5Hy7C0k7RMigLhANwBoaCJWBbtHj')
shiny::runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
runApp('Desktop/R/Shiny/mtcars')
